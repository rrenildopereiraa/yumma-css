@use "../breakpoints" as b;

@mixin create-spacing-utilities($prefix, $map, $properties) {
  // Base spacing utilities
  @each $key, $value in $map {
    .#{$prefix}-#{$key} > :not([hidden]) ~ :not([hidden]) {
      @each $property in $properties {
        @if $property == "margin-left" or $property == "margin-right" {
          @if $property == "margin-left" {
            #{$property}: calc(#{$value} * calc(1 - 0));
          } @else {
            #{$property}: calc(#{$value} * 0);
          }
        } @else {
          @if $property == "margin-top" {
            #{$property}: calc(#{$value} * calc(1 - 0));
          } @else {
            #{$property}: calc(#{$value} * 0);
          }
        }
      }
    }

    // Hover spacing variants
    .h\:#{$prefix}-#{$key}:hover > :not([hidden]) ~ :not([hidden]) {
      @each $property in $properties {
        @if $property == "margin-left" or $property == "margin-right" {
          @if $property == "margin-left" {
            #{$property}: calc(#{$value} * calc(1 - 0));
          } @else {
            #{$property}: calc(#{$value} * 0);
          }
        } @else {
          @if $property == "margin-top" {
            #{$property}: calc(#{$value} * calc(1 - 0));
          } @else {
            #{$property}: calc(#{$value} * 0);
          }
        }
      }
    }
  }

  // Responsive spacing variants
  @each $bp, $bp-value in b.$yma-breakpoints {
    @media (min-width: $bp-value) {
      @each $key, $value in $map {
        .#{$bp}\:#{$prefix}-#{$key} > :not([hidden]) ~ :not([hidden]) {
          @each $property in $properties {
            @if $property == "margin-left" or $property == "margin-right" {
              @if $property == "margin-left" {
                #{$property}: calc(#{$value} * calc(1 - 0));
              } @else {
                #{$property}: calc(#{$value} * 0);
              }
            } @else {
              @if $property == "margin-top" {
                #{$property}: calc(#{$value} * calc(1 - 0));
              } @else {
                #{$property}: calc(#{$value} * 0);
              }
            }
          }
        }
      }
    }
  }
}
